{"version":3,"sources":["logo.svg","poemMaker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PoemMaker","p","filterWords","this","n","words","nouns","v","verbs","adj","adjectives","adv","adverbs","nM","filter","x","g","adjM","vRand","i","Math","floor","random","length","substring","cRand","c","advRand","w","adjRand","word","nRand","nF","def","adjF","vF","connectors","poem","index","connector","push","makeSentence","type","s","App","useState","count","setCount","makePoem","console","log","items","entries","value","key","className","name","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bdd24870.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import words from './words.json'\n\nexport default class PoemMaker {\n\n\n    constructor(p) {\n        this.def = \"ال\"\n        this.adjF = \"ة\"\n        this.vF = \"ت\"\n        this.c = words.connectors;\n        this.p = p?p:5\n        this.filterWords(this.p)\n    }\n\n    filterWords = function (p) {\n        this.n = words.nouns;\n        this.v = words.verbs;\n        this.adj = words.adjectives;\n        this.adv = words.adverbs;\n\n        //FILTER BY SEX\n        this.nM = this.n.filter(x => x.g === \"m\")\n        this.adjM = this.adj.filter(x => x.g === \"m\")\n\n        // this.n = this.n.filter(x => Math.abs(p - x.p) < 3)\n        // this.adj = this.adj.filter(x => Math.abs(p - x.p) < 3)\n        // this.adv = this.adv.filter(x => Math.abs(p - x.p) < 3)\n    }\n\n\n    vRand = function (g) {\n        let i = Math.floor(Math.random() * this.v.length);\n        if (g === \"f\"){\n            return \"ت\" + this.v[i].substring(1)\n        }\n        return this.v[i]\n    }\n\n    cRand = function (g) {\n        let i = Math.floor(Math.random() * this.c.length);\n        return this.c[i]\n    }\n\n    advRand = function (g) {\n        let i = Math.floor(Math.random() * this.adv.length);\n        return this.adv[i].w\n    }\n\n    adjRand = function (g) {\n        let word = this.adj[Math.floor(Math.random() * this.adj.length)].w\n        if (g===\"f\")return word + \"ة\"\n        return word\n\n    }\n\n    nRand = function (g) {\n        if (g===\"f\")return this.nF[Math.floor(Math.random() * this.nF.length)].w\n         return this.nM[Math.floor(Math.random() * this.nM.length)].w\n \n    }\n\n    makePoem(n) {\n\n        let poem = []\n\n        if (!n) n = 1\n        for (let index = 0; index < n; index++) {\n            let connector = \"\";\n            if(index<n){\n                connector = this.cRand()\n            }\n            poem.push(connector + \" \" + this.makeSentence());\n        }\n        return poem;\n    }\n\n    makeSentence() {\n        let type = Math.floor(Math.random() * 8)\n        let s = \"\";\n        let g = Math.floor(Math.random * 2)?\"f\":\"m\"\n        if (type === 0){\n            s = s + this.vRand(g) + \" \" + this.def + this.nRand(g) + \" \" + this.def + this.adjRand(g) \n        }\n        else if (type === 1){\n            s = s + this.vRand(g) + \" \" + this.def + this.nRand(g) + \" \" + this.advRand(g)\n        }\n        else if (type === 2){\n            s = s + this.vRand(g) + \" \" + this.advRand(g) + \" \" + this.cRand(g) + \" \" + this.vRand(g) + \" \" + this.advRand(g)\n        }\n        else if (type === 3){\n            s = s + this.def + this.nRand(g) + \" \" + this.vRand(g) + \" \" + this.nRand(g) \n        }\n        else if (type === 4){\n            s = s + this.def + this.nRand(g) + \" \" + this.vRand(g) + \" \" + this.cRand(g) + \" \" + this.vRand(g) \n        }\n        else if (type === 5){\n            s = s + this.nRand(g) + \" \" + this.def + this.nRand(g) + \" \" + this.vRand(g)\n        }\n        else if (type === 6){\n            s = s + this.advRand(g) + \" \" + this.vRand(g) + \" \" + this.def + this.nRand(g) + \" \" + this.advRand(g) \n        }\n        else if (type === 7){\n            s = s + this.def + this.nRand(g) + \" \" + this.vRand(g) + \" \" + this.def + this.nRand(g) + \" \" + this.advRand(g)\n        }\n\n        return s;\n    }\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PoemMaker from './poemMaker'\n\nfunction App() {\n\n  const [count, setCount] = useState(2);\n  const poemMaker = new PoemMaker(5);\n  const poem = poemMaker.makePoem(count);\n  console.log(poem);\n  const items = [];\n  for (const [index, value] of poem.entries()) {\n    items.push(<p key={index}>{value}</p>)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          صانع الأشعار\n        </p>\n        <input\n        className=\"App-input\"\n          name=\"عدد الجمل\"\n          type=\"number\"\n          value={count}\n          onChange={(event) => { setCount(event.target.value) }}\n        />\n        <h2>\n          {items}\n        </h2>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}